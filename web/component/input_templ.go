// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package component

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"log"
)

func Input(ia InputAttrs) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<input")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, ia.ToAttrs())
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

type InputAttrs struct {
	Type         string
	Name         string
	ID           string
	Autocomplete string
	Required     bool
	Class        string
	Value        string
}

func (ia InputAttrs) ToAttrs() templ.Attributes {
	attrs := templ.Attributes{
		"name":     ia.NameAttr(),
		"type":     ia.TypeAttr(),
		"value":    ia.Value,
		"id":       ia.IDAttr(),
		"required": ia.Required,
		"class":    ia.ClassAttr(),
	}

	attrs = ia.AddAutocompleteAttr(attrs)

	return attrs
}

func (ia InputAttrs) NameAttr() string {
	if ia.Name == "" {
		log.Fatal("component.InputAttrs: Missing Attr 'Name'")
	}
	return ia.Name
}

func (ia InputAttrs) IDAttr() string {
	if ia.ID == "" {
		return ia.Name
	}
	return ia.ID
}

func (ia InputAttrs) TypeAttr() string {
	if ia.Type == "" {
		return "text"
	}
	return ia.Type
}

func (ia InputAttrs) ClassAttr() string {
	defaultClass := "block w-full rounded-md bg-white/5 px-3 py-1.5 text-base text-white outline outline-1 -outline-offset-1 outline-white/10 placeholder:text-gray-500 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-teal-500 sm:text-sm/6"
	return CssClass(defaultClass, ia.Class)
}

func (ia InputAttrs) AddAutocompleteAttr(attrs templ.Attributes) templ.Attributes {
	if ia.Autocomplete != "" {
		attrs["autocomplete"] = ia.Autocomplete
	}
	return attrs
}

var _ = templruntime.GeneratedTemplate
