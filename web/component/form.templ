package component

import (
	"fmt"
	"strings"
	"strconv"
)

templ Form(fa FormAttrs) {
	<form { fa.ToAttrs()... }>
		@CSRF()
		@FormErrors(fa.Errors)
		{ children... }
	</form>
}

templ FormErrors(errors []string) {
	if len(errors) > 0 {
		<div class="rounded-md bg-red-100 p-4">
			<div class="flex">
				<div class="shrink-0">
					<svg class="size-5 text-red-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
						<path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM8.28 7.22a.75.75 0 0 0-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 1 0 1.06 1.06L10 11.06l1.72 1.72a.75.75 0 1 0 1.06-1.06L11.06 10l1.72-1.72a.75.75 0 0 0-1.06-1.06L10 8.94 8.28 7.22Z" clip-rule="evenodd"></path>
					</svg>
				</div>
				<div class="ml-3">
					<h3 class="text-sm font-medium text-red-900">
						if len(errors) == 1 {
							There was an error
						} else {
							There were { strconv.Itoa(len(errors)) } errors
						}
					</h3>
					<div class="mt-2 text-sm text-red-800">
						<ul role="list" class="list-disc space-y-1 pl-5">
							for _, err := range errors {
								<li>{ err }</li>
							}
						</ul>
					</div>
				</div>
			</div>
		</div>
	}
}

templ CSRF() {
	<input type="hidden" name="gorilla.csrf.Token" value={ ctx.Value("gorilla.csrf.Token").(string) }/>
}

type FormAttrs struct {
	ID       string
	Class    string
	Errors   []string
	HxMethod string
	HxAction string
	HxSwap   string
}

func (fa *FormAttrs) ToAttrs() templ.Attributes {
	attrs := templ.Attributes{
		"class": fa.Class,
		"id":    fa.ID,
	}
	attrs = fa.AddHxMethod(attrs)
	attrs = fa.AddHxSwap(attrs)

	return attrs
}
func (fa *FormAttrs) AddHxMethod(attrs templ.Attributes) templ.Attributes {
	if fa.HxMethod != "" {
		fa.HxMethod = strings.ToLower(fa.HxMethod)
		attrs[fmt.Sprintf("hx-%s", fa.HxMethod)] = fa.HxAction
	}
	return attrs
}
func (fa *FormAttrs) AddHxSwap(attrs templ.Attributes) templ.Attributes {
	if fa.HxSwap != "" {
		attrs["hx-swap"] = fa.HxSwap
	}
	return attrs
}
